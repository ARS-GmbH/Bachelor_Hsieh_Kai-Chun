"""
Copyright (c) 2020 ARS Computer & Consulting GmbH

This program and the accompanying materials are made
available under the terms of the Eclipse Public License 2.0
which is available at https://www.eclipse.org/legal/epl-2.0/

SPDX-License-Identifier: EPL-2.0
"""

import abc

class SolutionManager(abc.ABC):
    """
    The interface for a solution management plugin.
    """
    
    # getters of basic metadata
    @staticmethod
    @abc.abstractmethod
    def getManufacturer():
        """
        Get the manufacturer's name.
        
        Returns:
            str: Manufacturer's name.
        """
        raise NotImplementedError("Not implemented function")

    @staticmethod
    @abc.abstractmethod
    def getAuthor():
        """
        Get the author's name.
        
        Returns:
            str: Author's name.
        """

        raise NotImplementedError("Not implemented function")

    @staticmethod
    @abc.abstractmethod
    def getName():
        """
        Get the name of this plugin.
        !!! Should be identical for every plugin under same manufacturer !!!
        
        Returns:
            str: Name of this plugin.
        """
        raise NotImplementedError("Not implemented function")

    @staticmethod
    @abc.abstractmethod
    def getVersion():
        """
        Get the version of this plugin.
        
        Returns:
            str: Version of this plugin.
        """
        raise NotImplementedError("Not implemented function")

    @staticmethod
    @abc.abstractmethod
    def getDescription():
        """
        Get the description of this plugin.
        !!! 
            This is a description for helping average users to choose plugins with. 
            Make sure to make the content as easy and clear as possible. 
        !!!
        
        Returns:
            str: Description of this plugin.
        """
        raise NotImplementedError("Not implemented function")
    
    @staticmethod
    @abc.abstractmethod
    def getPriceDescription():
        """
        Get the price description of this plugin.
        !!! 
            This is a description for helping average users to choose plugins with. 
            Make sure to make the content as easy and clear as possible. 
        !!!
        
        Returns:
            str: Price description of this plugin.
        """
        raise NotImplementedError("Not implemented function")

    
    # service handlers
    @abc.abstractmethod
    def createModel(self, database, id):
        """
        Create a brand-new model.
        
        Args:
            database (obj): The database instance spawned by server.
            id       (int): Global modelID generated by module layer.

        Returns:
            bool: True if model created, resources for new model reserved successfully.
        """
        raise NotImplementedError("Not implemented function")

    @abc.abstractmethod
    def feedTrainData(self, database, id, trainData):
        """
        Feed training data to the model.
        
        Args:
            database (obj): The database instance spawned by server.
            id       (int): ID of the model to feed data with.
            trainData(dict<int,string>): New training data, dict of resourceID:class-tag of the resource.

        Returns:
            bool: True if training data fed successfully.
            str: Error message if operation failed.
        """
        raise NotImplementedError("Not implemented function")

    @abc.abstractmethod
    def trainModel(self, database, modelID, parameters, onMessage, onFinished):
        """
        Start to train the model.
        
        Args:
            database (obj): The database instance spawned by server.
            id       (int): ID of the model to train.
            parameters(dict<str,obj>): Parameters provided from user to costomize training.
            onMessage (func(str)): A callback function for exporting training logging to user.
            onFinished (func(bool)): A callback function called exactly once whenever training is completed. True: if all ok; False: if failed.

        Returns:
            No Return.
        """
        raise NotImplementedError("Not implemented function")

    @abc.abstractmethod
    def predictWithID(self, database, modelID, inputDataIDs, onFinished):
        """
        Make prediction with given list of resourceIDs.
        
        Args:
            database (obj): The database instance spawned by server.
            modelID  (int): The model's ID to predict with.
            inputDataIDs (List<int>): List of resourceIDs.
            onFinished (func(obj)): A callback function called exactly once whenever prediction is completed.
                                    Type of prediction result: dict<str,obj>
                                    Format of prediction result:
                                        ISOK (bool): Is prediction performed successfully.
                                        RESULT (dict<int,str>): The dict of the prediction result. Form of resourceID:class-tag of the resource.

        Returns:
            No Return.
        """
        raise NotImplementedError("Not implemented function")

    @abc.abstractmethod
    def predictWithData(self, database, modelID, resourceNames, rawDatas, onFinished):
        """
        Make prediction with given list of rawDatas.
        
        Args:
            database (obj): The database instance spawned by server.
            modelID  (int): The model's ID to predict with.
            resourceNames (List<str>): List of filename of uploaded resources.
            rawDatas (List<int>): List of uploaded resources.
            onFinished (func(obj)): A callback function called exactly once whenever prediction is completed.
                                    Type of prediction result: dict<str>obj
                                    Format of prediction result:
                                        ISOK (bool): Is prediction performed successfully.
                                        RESULT (dict<int>str): The dict of the prediction result. Form of resourceID:class-tag of the resource.

        Returns:
            No Return.
        """
        raise NotImplementedError("Not implemented function")

